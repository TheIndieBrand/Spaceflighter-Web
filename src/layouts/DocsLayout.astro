---
import DocsSidebar from "../components/DocsSidebar.astro";
const { title, docs, content } = Astro.props;
---

<section class="wiki-section py-5 py-lg-6">
    <div class="container-fluid">

        <div class="row">

            <div class="col-lg-3 mb-5 mb-lg-0">
                <div class="sidebar-sticky wiki-sidebar">
                    <DocsSidebar docs={docs} />
                </div>
            </div>

            <div class="col-lg-9">
                <div class="row justify-content-center">
                    
                    <div class="col-lg-7 col-xl-7 doc-main-area"> 
                        
                        <h1 class="wiki-content-title fw-bold display-6 mb-4">{title}</h1>
                        
                        <div class="doc-content p-0" set:html={content}></div>
                    </div>

                    <div class="col-lg-3 col-xl-3 d-none d-lg-block"> 
                        <div class="tdc-sticky">
                            <div class="tdc-box p-3">
                                <h6 class="text-uppercase fw-bold tdc-heading mb-3">
                                    En esta p√°gina
                                </h6>
                                <ul class="list-unstyled small" id="tableOfContents"></ul>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const docContent = document.querySelector('.doc-content');
        const tocContainer = document.getElementById('tableOfContents');
        
        if (docContent && tocContainer) {
            const headings = docContent.querySelectorAll('h2, h3, h4, h5, h6');
            
            if (headings.length > 0) {
                headings.forEach((heading, index) => {
                    if (!heading.id) {
                        const text = heading.textContent || '';
                        const id = text
                            .toLowerCase()
                            .normalize('NFD')
                            .replace(/[\u0300-\u036f]/g, '')
                            .replace(/[^a-z0-9\s-]/g, '')
                            .trim()
                            .replace(/\s+/g, '-');
                        heading.id = id || `heading-${index}`;
                    }
                });
                
                const tocHTML = Array.from(headings).map(heading => {
                    const level = parseInt(heading.tagName.substring(1));
                    const indent = (level - 2) * 12;
                    const text = heading.textContent || '';
                    
                    return `
                        <li class="mb-1" style="margin-left: ${indent}px;">
                            <a href="#${heading.id}" class="tdc-link text-decoration-none text-secondary" data-heading-id="${heading.id}">
                                ${text}
                            </a>
                        </li>
                    `;
                }).join('');
                
                tocContainer.innerHTML = tocHTML;
                
                const tocLinks = tocContainer.querySelectorAll('.tdc-link');

                const observerOptions = {
                    root: null,
                    rootMargin: '-80px 0px -80% 0px',
                    threshold: 0
                };
                
                const observer = new IntersectionObserver((entries) => {
                    entries.forEach(entry => {
                        if (entry.isIntersecting) {
                            const id = entry.target.id;
                            
                            tocLinks.forEach(link => link.classList.remove('active'));
                            
                            const activeElement = tocContainer.querySelector(`[data-heading-id="${id}"]`);
                            if (activeElement) {
                                activeElement.classList.add('active');
                            }
                        }
                    });
                }, observerOptions);
                
                headings.forEach(heading => observer.observe(heading));
                
                tocLinks.forEach(link => {
                    link.addEventListener('click', (e) => {
                        e.preventDefault();
                        const targetId = link.getAttribute('href')?.substring(1);
                        const targetElement = targetId ? document.getElementById(targetId) : null;
                        
                        if (targetElement) {
                            const offsetTop = targetElement.offsetTop - 80;
                            window.scrollTo({
                                top: offsetTop,
                                behavior: 'smooth'
                            });
                        }
                    });
                });
            } else {
                tocContainer.innerHTML = '<li class="text-muted small">No hay secciones</li>';
            }
        }
    });

    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initInteractivity);
    } else {
        initInteractivity();
    }

    function initInteractivity() {
        const accordionHeaders = document.querySelectorAll('.doc-accordion-header');
        
        accordionHeaders.forEach(header => {
            const content = document.getElementById(header.getAttribute('data-target') || '');
            if (content && header.parentElement?.parentElement?.querySelector('.doc-accordion-item:first-child .doc-accordion-header') === header) {
                content.classList.add('active');
                header.classList.add('active');
                const icon = header.querySelector('.doc-accordion-icon');
                if (icon) {
                    icon.style.transform = 'rotate(180deg)';
                }
            }
            
            header.addEventListener('click', () => {
                const targetId = header.getAttribute('data-target');
                const content = targetId ? document.getElementById(targetId) : null;
                const icon = header.querySelector('.doc-accordion-icon');
                
                if (content) {
                    const isActive = content.classList.contains('active');
                    
                    const accordion = header.closest('.doc-accordion');
                    if (accordion) {
                        const allContents = accordion.querySelectorAll('.doc-accordion-content');
                        const allHeaders = accordion.querySelectorAll('.doc-accordion-header');
                        const allIcons = accordion.querySelectorAll('.doc-accordion-icon');
                        
                        allContents.forEach(c => {
                            c.classList.remove('active');
                            c.style.maxHeight = '0';
                        });
                        allHeaders.forEach(h => h.classList.remove('active'));
                        allIcons.forEach(i => i.style.transform = 'rotate(0deg)');
                    }
                    
                    if (!isActive) {
                        content.classList.add('active');
                        content.style.maxHeight = content.scrollHeight + 'px';
                        header.classList.add('active');
                        if (icon) {
                            icon.style.transform = 'rotate(180deg)';
                        }
                    }
                }
            });
        });

        const tabButtons = document.querySelectorAll('.doc-tab-button');
        
        tabButtons.forEach((button, index) => {
            if (index === 0) {
                button.classList.add('active');
                const tabId = button.getAttribute('data-tab');
                if (tabId) {
                    const targetPanel = document.getElementById(tabId);
                    if (targetPanel) {
                        targetPanel.classList.add('active');
                    }
                }
            }
            
            button.addEventListener('click', () => {
                const tabId = button.getAttribute('data-tab');
                const tabsContainer = button.closest('.doc-tabs');
                
                if (!tabsContainer || !tabId) return;
                
                const allButtons = tabsContainer.querySelectorAll('.doc-tab-button');
                const allPanels = tabsContainer.querySelectorAll('.doc-tab-panel');
                
                allButtons.forEach(btn => btn.classList.remove('active'));
                allPanels.forEach(panel => panel.classList.remove('active'));
                
                button.classList.add('active');
                const targetPanel = document.getElementById(tabId);
                if (targetPanel) {
                    targetPanel.classList.add('active');
                }
            });
        });

        const accordionContents = document.querySelectorAll('.doc-accordion-content');
        accordionContents.forEach(content => {
            content.addEventListener('transitionend', () => {
                if (content.classList.contains('active')) {
                    content.style.maxHeight = 'none';
                }
            });
        });
    }

    if (typeof MutationObserver !== 'undefined') {
        const observer = new MutationObserver((mutations) => {
            mutations.forEach((mutation) => {
                if (mutation.addedNodes.length) {
                    initInteractivity();
                }
            });
        });
        
        observer.observe(document.body, {
            childList: true,
            subtree: true
        });
    }
</script>

<style>
    :root {
        --color-bg: #ffffff;
        --color-bg-secondary: #f7f6f3;
        --color-text-primary: #37352f;
        --color-text-secondary: #787774;
        --color-text-tertiary: #9b9a97;
        --color-border: #e9e9e7;
        --color-accent: #2383e2;
        --color-accent-bg: rgba(35, 131, 226, 0.08);
        --color-hover-bg: rgba(0, 0, 0, 0.03);
        --color-code-bg: #f7f6f3;
        --color-code-border: #e9e9e7;
    }

    @media (prefers-color-scheme: dark) {
        :root {
            --color-bg: #191919;
            --color-bg-secondary: #252525;
            --color-text-primary: #ffffff;
            --color-text-secondary: #9b9a97;
            --color-text-tertiary: #6f6f6f;
            --color-border: #373737;
            --color-accent: #5a9fd4;
            --color-accent-bg: rgba(90, 159, 212, 0.15);
            --color-hover-bg: rgba(255, 255, 255, 0.05);
            --color-code-bg: #252525;
            --color-code-border: #373737;
        }
    }

    .wiki-section {
        background: var(--color-bg);
        min-height: 100vh;
        color: var(--color-text-primary);
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif;
    }

    .wiki-sidebar {
        position: sticky;
        top: 80px;
        max-height: calc(100vh - 100px);
        overflow-y: auto;
        padding-right: 24px;
        scrollbar-width: thin;
        scrollbar-color: var(--color-border) transparent;
    }

    .wiki-sidebar::-webkit-scrollbar {
        width: 6px;
    }

    .wiki-sidebar::-webkit-scrollbar-track {
        background: transparent;
    }

    .wiki-sidebar::-webkit-scrollbar-thumb {
        background-color: var(--color-border);
        border-radius: 3px;
    }

    .wiki-sidebar::-webkit-scrollbar-thumb:hover {
        background-color: var(--color-text-tertiary);
    }

    .wiki-sidebar :global(.list-group-item) {
        background-color: transparent !important;
        border: none !important;
        padding: 0;
        margin-bottom: 2px;
    }

    .wiki-sidebar :global(.list-group-item a) {
        color: var(--color-text-secondary);
        font-weight: 400;
        font-size: 0.875rem;
        text-decoration: none;
        padding: 4px 8px;
        display: block;
        border-radius: 3px;
        transition: background-color 0.15s ease, color 0.15s ease;
        line-height: 1.5;
    }

    .wiki-sidebar :global(.list-group-item a:hover) {
        background-color: var(--color-hover-bg);
        color: var(--color-text-primary);
    }

    .wiki-sidebar :global(.list-group-item a.active) {
        background-color: var(--color-accent-bg);
        color: var(--color-accent);
        font-weight: 500;
    }

    /* ============================================================================ */
    /* TABLA DE CONTENIDO (TdC) - Derecha */
    /* ============================================================================ */
    .tdc-sticky {
        position: sticky;
        top: 80px;
        padding-left: 16px;
    }

    .tdc-heading {
        color: var(--color-text-tertiary) !important;
        font-size: 0.75rem;
        font-weight: 600;
        letter-spacing: 0.5px;
        margin-bottom: 8px !important;
    }

    .tdc-box {
        background-color: transparent;
        border-left: 1px solid var(--color-border);
        padding-left: 16px !important;
    }

    .tdc-link {
        color: var(--color-text-secondary);
        text-decoration: none;
        font-size: 0.813rem;
        transition: color 0.15s ease;
        line-height: 1.5;
        display: block;
        padding: 4px 0;
    }
    
    .tdc-link:hover {
        color: var(--color-text-primary);
    }
    
    .tdc-link.active {
        color: var(--color-accent);
        font-weight: 500;
    }

    .doc-main-area {
        padding-right: 48px;
        max-width: 100%;
    }

    .wiki-content-title {
        color: var(--color-text-primary);
        font-size: 2.5rem;
        font-weight: 700 !important;
        line-height: 1.2;
        margin-bottom: 0.5rem !important;
        letter-spacing: -0.02em;
    }

    .doc-content {
        line-height: 1.6;
        color: var(--color-text-primary);
        font-size: 1rem;
    }

    .doc-content :global(p) {
        margin-bottom: 1rem;
        color: var(--color-text-primary);
    }

    .doc-content :global(a) {
        color: var(--color-accent);
        text-decoration: none;
        border-bottom: 1px solid transparent;
        transition: border-bottom-color 0.15s ease;
    }

    .doc-content :global(a:hover) {
        border-bottom-color: var(--color-accent);
    }

    .doc-content :global(h2) {
        color: var(--color-text-primary);
        margin-top: 2rem !important;
        margin-bottom: 0.75rem !important;
        font-size: 1.875rem;
        font-weight: 600;
        line-height: 1.3;
        letter-spacing: -0.01em;
    }

    .doc-content :global(h3) {
        color: var(--color-text-primary);
        margin-top: 1.5rem !important;
        margin-bottom: 0.5rem !important;
        font-size: 1.5rem;
        font-weight: 600;
        line-height: 1.3;
    }

    .doc-content :global(code:not(pre code)) {
        background-color: var(--color-accent-bg);
        color: var(--color-accent);
        padding: 2px 6px;
        border-radius: 3px;
        font-size: 0.9em;
        font-family: 'SF Mono', Monaco, 'Cascadia Code', 'Roboto Mono', Consolas, 'Courier New', monospace;
    }

    .doc-content :global(pre) {
        background-color: var(--color-code-bg) !important;
        border: 1px solid var(--color-code-border);
        border-radius: 3px;
        padding: 16px !important;
        margin: 1.5rem 0 !important;
        overflow-x: auto;
        font-size: 0.875rem;
        line-height: 1.5;
    }

    .doc-content :global(pre code) {
        background-color: transparent !important;
        color: var(--color-text-primary) !important;
        padding: 0 !important;
        font-family: 'SF Mono', Monaco, 'Cascadia Code', 'Roboto Mono', Consolas, 'Courier New', monospace;
    }

    .doc-content :global(ul),
    .doc-content :global(ol) {
        margin-bottom: 1rem;
        padding-left: 1.5rem;
    }

    .doc-content :global(li) {
        margin-bottom: 0.25rem;
        color: var(--color-text-primary);
    }

    .doc-content :global(blockquote) {
        border-left: 3px solid var(--color-border);
        padding-left: 16px;
        margin: 1.5rem 0;
        color: var(--color-text-secondary);
        font-style: italic;
    }

    .doc-content :global(.alert) {
        border-radius: 3px;
        margin: 1.5rem 0 !important;
        padding: 16px !important;
        background-color: var(--color-accent-bg) !important;
        border-left: 3px solid var(--color-accent) !important;
        border-top: none;
        border-right: none;
        border-bottom: none;
        color: var(--color-text-primary);
    }

    .doc-content :global(.alert-info) {
        background-color: rgba(35, 131, 226, 0.08) !important;
        border-left-color: #2383e2 !important;
    }

    .doc-content :global(.alert-warning) {
        background-color: rgba(255, 163, 68, 0.08) !important;
        border-left-color: #ffa344 !important;
    }

    .doc-content :global(.alert-success) {
        background-color: rgba(16, 185, 129, 0.08) !important;
        border-left-color: #10b981 !important;
    }

    .doc-content :global(table) {
        width: 100%;
        border-collapse: collapse;
        margin: 1.5rem 0;
        font-size: 0.875rem;
    }

    .doc-content :global(th),
    .doc-content :global(td) {
        padding: 8px 12px;
        border: 1px solid var(--color-border);
        text-align: left;
    }

    .doc-content :global(th) {
        background-color: var(--color-bg-secondary);
        font-weight: 600;
        color: var(--color-text-primary);
    }

    .doc-content :global(tr:hover) {
        background-color: var(--color-hover-bg);
    }

    .doc-content :global(img) {
        max-width: 100%;
        height: auto;
        border-radius: 3px;
        margin: 1.5rem 0;
    }

    .doc-content :global(hr) {
        border: none;
        border-top: 1px solid var(--color-border);
        margin: 2rem 0;
    }

    @media (max-width: 991px) {
        .doc-main-area {
            padding-right: 0;
        }

        .wiki-content-title {
            font-size: 2rem;
        }
    }
</style>